@startuml PAXOS

autonumber
box "PaxosClient" #LightBlue
    actor Client
end box
box "PaxosServer" #LightGreen
    collections "Replica" as Replica
    collections "Leader" as Leader
    collections "Acceptor" as Acceptor
end box


== PHASE 1 ==

Leader -> Leader : Activate "Scout" stage.

activate Leader

loop until at least half responses no greater than my ballot OR any greater
    note over Leader
        Broadcast P1a to all Acceptors.

        This activation corresponds
        to the **"Scouts"** thread
        but we are not using a separate
        thread in this implementation.
    end note

    Leader -> Acceptor : P1a <ballot>

    Acceptor -> Acceptor : Update my_ballot
    note right
        if msg_ballot > my_ballot:
            my_ballot = msg_ballot
    end note

    Acceptor -> Leader : P1b <ballot, accepted[]>
    note right
        **"accepted"**, is a collection of **PValue**.
        
        That collection is appended to during
        Phase 2 on P2a.

        A **PValue** consists of:
        <slot, ballot, req>
    end note

    deactivate Leader
end

alt At least ONE msg received with Ballot greater than my_ballot
    Leader -> Leader : Preempted <ballot>
    note over Leader
        **On PreemptedMessage:**

        if msg.ballot > my_ballot:
            **my_ballot = msg.ballot + 1**
            Go back to phase 1

        This Leader no longer Active
        **BECOME A FOLLOWER**
    end note
else At least half responses received with no Ballot greater than my_ballot?
    Leader -> Leader : Adopted <ballot, accepted[]>
    note over Leader
        **On AdoptedMessage:**

        if my_ballot == msg_ballot
            foreach pvalue in msg.accepted
                choose command with highest slot number
                Store it into proposals.
            Start Phase 2 with all Pvalues.
            (Might receive Preempted msg here)

        **BECOME THE DISTINGUISHED LEADER**
    end note
end


...

== PHASE 2 ==

Client -> Replica : Request <id, seq, cmd>
note over Replica
    **slot_in += 1**
end note

Replica -> Leader : Propose <slot, req>

alt slot NOT in Leader's proposals
    Leader -> Leader : Add (slot -> req) entry to proposals map

    alt if DISTINGUISHED LEADER
        Leader -> Leader : Activate "Commander" stage
        activate Leader

        loop until at least half responses no greater than my ballot OR any greater
            note over Leader
                Broadcast P2a to all Acceptors.

                This activation corresponds
                to the **"Commanders"** thread
                but we are not using a separate
                thread in this implementation.
            end note

            Leader -> Acceptor : P2a <Pvalue>
            note right
                A **PValue** consists of
                <slot, ballot, req>
            end note

            alt if msg.ballot == my_ballot
                Acceptor -> Acceptor : Add Pvalue to **"accepted"** set
            end


            Acceptor -> Leader : P2b <ballot, slot>

            deactivate Leader
        end

        alt At least ONE msg received with Ballot greater than my_ballot
            Leader -> Leader : Preempted <ballot>

            note over Leader
                **On PreemptedMessage:**

                if msg.ballot > my_ballot:
                    **my_ballot = msg.ballot + 1**
                    Go back to phase 1

                This Leader no longer Active
                **BECOME A FOLLOWER**
            end note
        else At least half responses received with no Ballot greater than my_ballot?
            Leader -> Replica : Decision <slot, req>

            Replica -> Replica : Register PaxosDecision
            note left
                PaxosDecision consists of:
                <id, seq, cmd>
            end note

            Replica -> Replica : Perform command
            note left
                Apply state change on
                the KV store.

                **slot_out += 1**
            end note

            Replica -> Client : Reply <id, seq, result>
            note right
                Finally, reply back to
                the Client.

                **END**
            end note
        end
    end
end

@enduml
